---
alwaysApply: true
description: High-level project structure and entry points for website-searcher
---

# Project Structure Guide (Workspace)

Workspace layout:
- Core library: [crates/core/](mdc:crates/core/)
  - Site configs/selectors: [crates/core/src/config.rs](mdc:crates/core/src/config.rs)
  - HTTP client + retry: [crates/core/src/fetcher.rs](mdc:crates/core/src/fetcher.rs)
  - Cloudflare (FlareSolverr): [crates/core/src/cf.rs](mdc:crates/core/src/cf.rs)
  - Parsing helpers/fallbacks: [crates/core/src/parser.rs](mdc:crates/core/src/parser.rs)
  - Query normalization/URL builder: [crates/core/src/query.rs](mdc:crates/core/src/query.rs)
  - Models (SearchKind, SiteConfig, SearchResult): [crates/core/src/models.rs](mdc:crates/core/src/models.rs)
  - Output helpers: [crates/core/src/output.rs](mdc:crates/core/src/output.rs)

- CLI binary: [crates/cli/](mdc:crates/cli/)
  - Entry + orchestration: [crates/cli/main.rs](mdc:crates/cli/main.rs)
  - Integration tests: [crates/cli/tests/](mdc:crates/cli/tests/)
  - Node helper for cs.rin (Playwright): [scripts/csrin_search.cjs](mdc:scripts/csrin_search.cjs)

- Desktop GUI (Tauri + React):
  - Tauri app: [src-tauri/](mdc:src-tauri/)
    - Commands in [src-tauri/src/lib.rs](mdc:src-tauri/src/lib.rs): `search_gui`, `list_sites`
    - Config: [src-tauri/tauri.conf.json](mdc:src-tauri/tauri.conf.json) (`devUrl` → Vite, `frontendDist` → `gui/dist`)
  - React app: [gui/](mdc:gui/)
    - API: [gui/src/api.ts](mdc:gui/src/api.ts)
    - UI: [gui/src/App.tsx](mdc:gui/src/App.tsx) (site multi-select + all CLI flags)

Docs: [README.md](mdc:README.md), [GUI_PLAN.md](mdc:GUI_PLAN.md)
Debug samples: [debug/](mdc:debug/)

CLI flags (see [crates/cli/main.rs](mdc:crates/cli/main.rs)):
- `--limit`, `--sites a,b,c`, `--debug`, `--format [json|table]`
- Cloudflare: `--no-cf`, `--cf-url`
- Cookies: `--cookie "key=value; other=value2"`
- cs.rin: `--csrin-pages`, `--csrin-search`, `--no-playwright`

Interactive mode:
- If the query is omitted, the app prompts for the search phrase and site selection (starts with none selected; choose explicitly or press Enter for ALL). Interactive output defaults to table.
- TUI: When running interactively and `--format table`, a live TUI is shown by default (no `--live` flag). Non-interactive sessions print tables to stdout.

Adding a new site:
1) Add a `SiteConfig` entry in [src/config.rs](mdc:src/config.rs). Choose `SearchKind::{QueryParam, PathEncoded, FrontPage, ListingPage}` and define `result_selector`.
2) If Cloudflare protected, set `requires_cloudflare = true` (solver is used unless `--no-cf`).
3) Ensure [src/parser.rs](mdc:src/parser.rs) fallback anchor scan can derive titles from slug when anchor text is empty; add site-specific filters if needed.
4) Validate with `--debug` (writes HTML/JSON when empty); tune selectors using saved files in [debug/](mdc:debug/).

Notes:
- Concurrency is capped to 3 (Tokio semaphore).
- Results are sorted and deduplicated by `(site, url)`.
- `gog-games` special-case: solver ignored; normal fetch + AJAX JSON/HTML fragment fallback; strict query/path filtering in both CLI and GUI.
- Tauri dev: `cargo tauri dev` (runs `pnpm --dir gui dev`), build: `pnpm --dir gui build && cargo tauri build`.
